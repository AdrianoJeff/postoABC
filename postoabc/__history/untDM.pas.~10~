unit untDM;

interface

uses
  System.SysUtils, System.Classes, Data.DBXFirebird, Data.DB, Data.SqlExpr,
  Data.FMTBcd, Datasnap.DBClient, Datasnap.Provider, Vcl.Dialogs, Vcl.Controls;

type
  Tdm = class(TDataModule)
    conn: TSQLConnection;
    qryCombustivel: TSQLQuery;
    dspCombustivel: TDataSetProvider;
    cdsCombustivel: TClientDataSet;
    cdsCombustivelID_COMBUSTIVEL: TIntegerField;
    cdsCombustivelDESCRICAO: TStringField;
    cdsCombustivelVALOR: TFMTBCDField;
    cdsCombustivelIMPOSTO: TFMTBCDField;
    qryTanque: TSQLQuery;
    dspTanque: TDataSetProvider;
    cdsTanque: TClientDataSet;
    cdsTanqueID_TANQUE: TIntegerField;
    cdsTanqueID_COMBUSTIVEL: TIntegerField;
    qryBomba: TSQLQuery;
    dspBomba: TDataSetProvider;
    cdsBomba: TClientDataSet;
    cdsBombaID_BOMBA: TIntegerField;
    cdsBombaID_TANQUE: TIntegerField;
    cdsTanqueCOMBUSTIVEL: TStringField;
    cdsBombaTANQUE: TIntegerField;
    procedure cdsCombustivelAfterInsert(DataSet: TDataSet);
    procedure cdsCombustivelBeforeDelete(DataSet: TDataSet);
    procedure cdsTanqueAfterInsert(DataSet: TDataSet);
    procedure cdsTanqueBeforeDelete(DataSet: TDataSet);
    procedure cdsTanqueAfterDelete(DataSet: TDataSet);
    procedure cdsCombustivelAfterDelete(DataSet: TDataSet);
    procedure cdsBombaAfterDelete(DataSet: TDataSet);
    procedure cdsBombaAfterInsert(DataSet: TDataSet);
    procedure cdsBombaBeforeDelete(DataSet: TDataSet);
  private
    { Private declarations }
    procedure confirmaExclusao;
  public
    { Public declarations }
    procedure salvar(oCds: TClientDataSet);
  end;

var
  dm: Tdm;

implementation

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

procedure Tdm.cdsBombaAfterDelete(DataSet: TDataSet);
begin
   salvar(cdsBomba);
end;

procedure Tdm.cdsBombaAfterInsert(DataSet: TDataSet);
begin
   cdsBombaID_BOMBA.AsInteger :=  cdsBomba.Aggregates.Find('seq').Value + 1;
end;

procedure Tdm.cdsBombaBeforeDelete(DataSet: TDataSet);
begin
   confirmaExclusao();
end;

procedure Tdm.cdsCombustivelAfterDelete(DataSet: TDataSet);
begin
   salvar(cdsCombustivel);
end;

procedure Tdm.cdsCombustivelAfterInsert(DataSet: TDataSet);
begin
   cdsCombustivelID_COMBUSTIVEL.AsInteger :=  cdsCombustivel.Aggregates.Find('seq').Value + 1;
end;

procedure Tdm.cdsCombustivelBeforeDelete(DataSet: TDataSet);
begin
   confirmaExclusao();
end;

procedure Tdm.cdsTanqueAfterDelete(DataSet: TDataSet);
begin
   salvar(cdsTanque);
end;

procedure Tdm.cdsTanqueAfterInsert(DataSet: TDataSet);
begin
   cdsTanqueID_TANQUE.AsInteger :=  cdsTanque.Aggregates.Find('seq').Value + 1;
end;

procedure Tdm.cdsTanqueBeforeDelete(DataSet: TDataSet);
begin
   confirmaExclusao();
end;

procedure Tdm.confirmaExclusao;
begin
   if MessageDlg('Tem certeza que excluir?', mtConfirmation, mbYesNo, 0) <> mrYes then
      abort;
end;

procedure Tdm.salvar(oCds: TClientDataSet);
begin
   try
      if oCds.State in [dsInsert, dsEdit] then
         oCds.Post;

      oCds.ApplyUpdates(0);

   except
      on e: Exception do
         MessageDlg('Não foi possível concluir essa operação, motivo: '+e.Message, mtError, [mbOk], 0);
   end;
end;

end.
